import registerPage from "../../support/register-page"
const registerInput = require('../../fixtures/data.json')

describe('Register Itera', () => {
  const RegisterPage = new registerPage()
  const uniqueSeed = Date.now().toString()
  const getUniqueId = () => Cypress._.uniqueId(uniqueSeed)
  it('success register', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.register_success).should('contain', 'Registration Successful')
  })
  it('success register empty epost', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.register_success).should('contain', 'Registration Successful')
  })
  it('success register empty mobile', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.register_success).should('contain', 'Registration Successful')
  })
  it('failed register empty form', () => {
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_firstname).should('contain', 'Please enter first name')
    cy.get(RegisterPage.danger_surname).should('contain', 'Please enter surname')
    cy.get(RegisterPage.danger_username).should('contain', 'Please enter username')
    cy.get(RegisterPage.danger_password).should('contain', 'Please enter password')
  })
  it('failed register empty firstname', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_firstname).should('contain', 'Please enter first name')
  })
  it('failed register empty surname', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_surname).should('contain', 'Please enter surname')
  })
  it('failed register empty username', () => {
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_username).should('contain', 'Please enter username')
  })
  it('failed register empty password', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_mismatch).should('contain', "'Confirm password' and 'Password' do not match.")
  })
  it('failed register empty confirm password', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_mismatch).should('contain', "'Confirm password' and 'Password' do not match.")
  })
  it('failed register mismatch password', () => {
    const uniqueId = getUniqueId();
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.username+uniqueId)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.wrong_password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_mismatch).should('contain', "'Confirm password' and 'Password' do not match.")
  })
  it('failed register username exist', () => {
    cy.visit('/')
    cy.get(RegisterPage.register).click()
    cy.url().should('include', '/UserRegister/NewUser')
    cy.get(RegisterPage.firstname).type(registerInput.firstname)
    cy.get(RegisterPage.surname).type(registerInput.surname)
    cy.get(RegisterPage.epost).type(registerInput.epost)
    cy.get(RegisterPage.mobile).type(registerInput.mobile)
    cy.get(RegisterPage.username).type(registerInput.static_username)
    cy.get(RegisterPage.password).type(registerInput.password)
    cy.get(RegisterPage.conf_password).type(registerInput.password)
    cy.get(RegisterPage.register_button).click()
    cy.get(RegisterPage.danger_username_exist).should('contain', 'Username already exist')
  })
})